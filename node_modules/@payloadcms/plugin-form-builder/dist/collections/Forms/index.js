"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFormCollection = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
var fields_1 = __importDefault(require("./fields"));
// all settings can be overridden by the config
var generateFormCollection = function (formConfig) {
    var _a, _b, _c, _d;
    var redirect = {
        name: 'redirect',
        type: 'group',
        admin: {
            hideGutter: true,
            condition: function (_, siblingData) { return (siblingData === null || siblingData === void 0 ? void 0 : siblingData.confirmationType) === 'redirect'; },
        },
        fields: [
            {
                name: 'url',
                label: 'URL to redirect to',
                type: 'text',
                required: true,
            },
        ],
    };
    if (formConfig.redirectRelationships) {
        redirect.fields.unshift({
            name: 'reference',
            label: 'Document to link to',
            type: 'relationship',
            relationTo: formConfig.redirectRelationships,
            required: true,
            maxDepth: 2,
            admin: {
                condition: function (_, siblingData) { return (siblingData === null || siblingData === void 0 ? void 0 : siblingData.type) === 'reference'; },
            },
        });
        redirect.fields.unshift({
            name: 'type',
            type: 'radio',
            options: [
                {
                    label: 'Internal link',
                    value: 'reference',
                },
                {
                    label: 'Custom URL',
                    value: 'custom',
                },
            ],
            defaultValue: 'reference',
            admin: {
                layout: 'horizontal',
            },
        });
        if (redirect.fields[2].type !== 'row')
            redirect.fields[2].label = 'Custom URL';
        redirect.fields[2].admin = {
            condition: function (_, siblingData) { return (siblingData === null || siblingData === void 0 ? void 0 : siblingData.type) === 'custom'; },
        };
    }
    var config = __assign(__assign({}, (formConfig === null || formConfig === void 0 ? void 0 : formConfig.formOverrides) || {}), { slug: ((_a = formConfig === null || formConfig === void 0 ? void 0 : formConfig.formOverrides) === null || _a === void 0 ? void 0 : _a.slug) || 'forms', admin: __assign({ useAsTitle: 'title', enableRichTextRelationship: false }, ((_b = formConfig === null || formConfig === void 0 ? void 0 : formConfig.formOverrides) === null || _b === void 0 ? void 0 : _b.admin) || {}), access: __assign({ read: function () { return true; } }, ((_c = formConfig === null || formConfig === void 0 ? void 0 : formConfig.formOverrides) === null || _c === void 0 ? void 0 : _c.access) || {}), fields: __spreadArray([
            {
                name: 'title',
                type: 'text',
                required: true,
            },
            {
                name: 'fields',
                type: 'blocks',
                blocks: Object.entries((formConfig === null || formConfig === void 0 ? void 0 : formConfig.fields) || {}).map(function (_a) {
                    var fieldKey = _a[0], fieldConfig = _a[1];
                    // let the config enable/disable fields with either boolean values or objects
                    if (fieldConfig !== false) {
                        var block = fields_1.default[fieldKey];
                        if (block === undefined && typeof fieldConfig === 'object') {
                            return fieldConfig;
                        }
                        if (typeof block === 'object' && typeof fieldConfig === 'object') {
                            return (0, deepmerge_1.default)(block, fieldConfig, {
                                arrayMerge: function (_, sourceArray) { return sourceArray; }
                            });
                        }
                        if (typeof block === 'function') {
                            return block(fieldConfig);
                        }
                        return block;
                    }
                    return null;
                }).filter(Boolean),
            },
            {
                name: 'submitButtonLabel',
                type: 'text',
                localized: true,
            },
            {
                name: 'confirmationType',
                type: 'radio',
                admin: {
                    description: 'Choose whether to display an on-page message or redirect to a different page after they submit the form.',
                    layout: 'horizontal',
                },
                options: [
                    {
                        label: 'Message',
                        value: 'message',
                    },
                    {
                        label: 'Redirect',
                        value: 'redirect',
                    },
                ],
                defaultValue: 'message',
            },
            {
                name: 'confirmationMessage',
                type: 'richText',
                localized: true,
                required: true,
                admin: {
                    condition: function (_, siblingData) { return (siblingData === null || siblingData === void 0 ? void 0 : siblingData.confirmationType) === 'message'; },
                },
            },
            redirect,
            {
                name: 'emails',
                type: 'array',
                admin: {
                    description: 'Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field\'s name with double curly brackets, i.e. {{firstName}}.',
                },
                fields: [
                    {
                        type: 'row',
                        fields: [
                            {
                                type: 'text',
                                name: 'emailTo',
                                label: 'Email To',
                                admin: {
                                    width: '100%',
                                    placeholder: '"Email Sender" <sender@email.com>'
                                },
                            },
                            {
                                type: 'text',
                                name: 'cc',
                                label: 'CC',
                                admin: {
                                    width: '50%',
                                },
                            },
                            {
                                type: 'text',
                                name: 'bcc',
                                label: 'BCC',
                                admin: {
                                    width: '50%',
                                },
                            },
                        ],
                    },
                    {
                        type: 'row',
                        fields: [
                            {
                                type: 'text',
                                name: 'replyTo',
                                label: 'Reply To',
                                admin: {
                                    width: '50%',
                                    placeholder: '"Reply To" <reply-to@email.com>',
                                },
                            },
                            {
                                type: 'text',
                                name: 'emailFrom',
                                label: 'Email From',
                                admin: {
                                    width: '50%',
                                    placeholder: '"Email From" <email-from@email.com>',
                                },
                            },
                        ],
                    },
                    {
                        type: 'text',
                        name: 'subject',
                        label: 'Subject',
                        defaultValue: 'You\'ve received a new message.',
                        required: true,
                        localized: true,
                    },
                    {
                        type: 'richText',
                        name: 'message',
                        label: 'Message',
                        localized: true,
                        admin: {
                            description: 'Enter the message that should be sent in this email.',
                        },
                    },
                ],
            }
        ], ((_d = formConfig === null || formConfig === void 0 ? void 0 : formConfig.formOverrides) === null || _d === void 0 ? void 0 : _d.fields) || [], true) });
    return config;
};
exports.generateFormCollection = generateFormCollection;
//# sourceMappingURL=index.js.map