"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serialize = void 0;
var escape_html_1 = __importDefault(require("escape-html"));
var slate_1 = require("slate");
var replaceDoubleCurlys_1 = require("./replaceDoubleCurlys");
var serialize = function (children, submissionData) { return children === null || children === void 0 ? void 0 : children.map(function (node, i) {
    if (slate_1.Text.isText(node)) {
        var text = "<span>".concat((0, escape_html_1.default)((0, replaceDoubleCurlys_1.replaceDoubleCurlys)(node.text, submissionData)), "</span>");
        if (node.bold) {
            text = ("\n        <strong>\n          ".concat(text, "\n        </strong>\n      "));
        }
        if (node.code) {
            text = ("\n        <code>\n          ".concat(text, "\n        </code>\n      "));
        }
        if (node.italic) {
            text = ("\n        <em >\n          ".concat(text, "\n        </em>\n      "));
        }
        return text;
    }
    if (!node) {
        return null;
    }
    switch (node.type) {
        case 'h1':
            return ("\n        <h1>\n          ".concat((0, exports.serialize)(node.children, submissionData), "\n        </h1>\n      "));
        case 'h6':
            return ("\n        <h6>\n          ".concat((0, exports.serialize)(node.children, submissionData), "\n        </h6>\n      "));
        case 'quote':
            return ("\n        <blockquote>\n          ".concat((0, exports.serialize)(node.children, submissionData), "\n        </blockquote>\n      "));
        case 'ul':
            return ("\n        <ul>\n          ".concat((0, exports.serialize)(node.children, submissionData), "\n        </ul>\n      "));
        case 'ol':
            return ("\n        <ol>\n          ".concat((0, exports.serialize)(node.children, submissionData), "\n        </ol>\n      "));
        case 'li':
            return ("\n        <li>\n          ".concat((0, exports.serialize)(node.children, submissionData), "\n        </li>\n      "));
        case 'indent':
            return ("\n          <p style=\"padding-left: 20px\">\n            ".concat((0, exports.serialize)(node.children, submissionData), "\n          </p>\n        "));
        case 'link':
            return ("\n        <a href={".concat((0, escape_html_1.default)(node.url), "}>\n          ").concat((0, exports.serialize)(node.children, submissionData), "\n        </a>\n      "));
        default:
            return ("\n        <p>\n          ".concat((0, exports.serialize)(node.children, submissionData), "\n        </p>\n     "));
    }
}).filter(Boolean).join(''); };
exports.serialize = serialize;
//# sourceMappingURL=serializeRichText.js.map