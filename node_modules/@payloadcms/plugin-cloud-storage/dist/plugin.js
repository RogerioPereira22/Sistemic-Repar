"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cloudStorage = void 0;
var webpack_1 = require("./webpack");
var beforeChange_1 = require("./hooks/beforeChange");
var afterDelete_1 = require("./hooks/afterDelete");
var getFields_1 = require("./fields/getFields");
// This plugin extends all targeted collections by offloading uploaded files
// to cloud storage instead of solely storing files locally.
// It is based on an adapter approach, where adapters can be written for any cloud provider.
// Adapters are responsible for providing four actions that this plugin will use:
// 1. handleUpload, 2. handleDelete, 3. generateURL, 4. staticHandler
// Optionally, the adapter can specify any Webpack config overrides if they are necessary.
var cloudStorage = function (pluginOptions) {
    return function (config) {
        var allCollectionOptions = pluginOptions.collections;
        var webpack = (0, webpack_1.extendWebpackConfig)({ options: pluginOptions, config: config });
        return __assign(__assign({}, config), { admin: __assign(__assign({}, (config.admin || {})), { webpack: webpack }), collections: (config.collections || []).map(function (existingCollection) {
                var _a, _b;
                var options = allCollectionOptions[existingCollection.slug];
                if (options === null || options === void 0 ? void 0 : options.adapter) {
                    var adapter = options.adapter({
                        collection: existingCollection,
                        prefix: options.prefix,
                    });
                    var fields = (0, getFields_1.getFields)({
                        collection: existingCollection,
                        disablePayloadAccessControl: options.disablePayloadAccessControl,
                        generateFileURL: options.generateFileURL,
                        prefix: options.prefix,
                        adapter: adapter,
                    });
                    var handlers = __spreadArray([], (typeof existingCollection.upload === 'object' &&
                        Array.isArray(existingCollection.upload.handlers)
                        ? existingCollection.upload.handlers
                        : []), true);
                    if (!options.disablePayloadAccessControl) {
                        handlers.push(adapter.staticHandler);
                    }
                    return __assign(__assign({}, existingCollection), { upload: __assign(__assign({}, (typeof existingCollection.upload === 'object' ? existingCollection.upload : {})), { handlers: handlers, disableLocalStorage: typeof options.disableLocalStorage === 'boolean'
                                ? options.disableLocalStorage
                                : true }), hooks: __assign(__assign({}, (existingCollection.hooks || {})), { beforeChange: __spreadArray(__spreadArray([], (((_a = existingCollection.hooks) === null || _a === void 0 ? void 0 : _a.beforeChange) || []), true), [
                                (0, beforeChange_1.getBeforeChangeHook)({ adapter: adapter, collection: existingCollection }),
                            ], false), afterDelete: __spreadArray(__spreadArray([], (((_b = existingCollection.hooks) === null || _b === void 0 ? void 0 : _b.afterDelete) || []), true), [
                                (0, afterDelete_1.getAfterDeleteHook)({ adapter: adapter, collection: existingCollection }),
                            ], false) }), fields: fields });
                }
                return existingCollection;
            }) });
    };
};
exports.cloudStorage = cloudStorage;
//# sourceMappingURL=plugin.js.map