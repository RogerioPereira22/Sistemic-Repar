"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSubmissionCollection = void 0;
var deepMerge_1 = __importDefault(require("../../utilities/deepMerge"));
var sendEmail_1 = __importDefault(require("./hooks/sendEmail"));
var createCharge_1 = __importDefault(require("./hooks/createCharge"));
// all settings can be overridden by the config
var generateSubmissionCollection = function (formConfig) {
    var _a;
    return (0, deepMerge_1.default)({
        slug: ((_a = formConfig === null || formConfig === void 0 ? void 0 : formConfig.formSubmissionOverrides) === null || _a === void 0 ? void 0 : _a.slug) || 'formSubmissions',
        access: {
            create: function () { return true; },
            update: function () { return false; },
            read: function (_a) {
                var user = _a.req.user;
                return !!user;
            } // logged-in users
        },
        admin: {
            enableRichTextRelationship: false
        },
        hooks: {
            beforeChange: [
                function (data) { return (0, createCharge_1.default)(data, formConfig); },
                function (data) { return (0, sendEmail_1.default)(data, formConfig); },
            ],
        },
        fields: [
            {
                name: 'form',
                type: 'relationship',
                relationTo: 'forms',
                required: true,
                admin: {
                    readOnly: true
                },
            },
            {
                name: 'submissionData',
                type: 'array',
                admin: {
                    readOnly: true
                },
                fields: [
                    {
                        name: 'field',
                        type: 'text',
                        required: true,
                    },
                    {
                        name: 'value',
                        type: 'text',
                        required: true,
                        validate: function (value) {
                            // TODO:
                            // create a validation function that dynamically
                            // relies on the field type and its options as configured.
                            // How to access sibling data from this field?
                            // Need the `name` of the field in order to validate it.
                            // Might not be possible to use this validation function.
                            // Instead, might need to do all validation in a `beforeValidate` collection hook.
                            if (typeof value !== 'undefined') {
                                return true;
                            }
                            return 'This field is required.';
                        },
                    },
                ],
            },
            {
                name: 'payments',
                type: 'array',
                admin: {
                    readOnly: true
                },
                fields: [
                    {
                        name: 'field',
                        label: 'Field',
                        type: 'text'
                    },
                    {
                        name: 'status',
                        label: 'Status',
                        type: 'text'
                    },
                    {
                        name: 'amount',
                        type: 'number'
                    },
                    {
                        name: 'amount',
                        type: 'number'
                    },
                    {
                        name: 'paymentProcessor',
                        type: 'select',
                        options: [
                            {
                                label: 'Stripe',
                                value: 'stripe'
                            }
                        ]
                    },
                    {
                        name: 'creditCard',
                        label: 'Credit Card',
                        type: 'group',
                        fields: [
                            {
                                name: 'token',
                                label: 'token',
                                type: 'text'
                            },
                            {
                                name: 'brand',
                                label: 'Brand',
                                type: 'text'
                            },
                            {
                                name: 'number',
                                label: 'Number',
                                type: 'text'
                            }
                        ]
                    }
                ]
            }
        ],
    }, formConfig.formSubmissionOverrides || {});
};
exports.generateSubmissionCollection = generateSubmissionCollection;
//# sourceMappingURL=index.js.map