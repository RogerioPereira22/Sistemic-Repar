"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var serializeRichText_1 = require("../../../utilities/serializeRichText");
var replaceDoubleCurlys_1 = require("../../../utilities/replaceDoubleCurlys");
var sendEmail = function (beforeChangeData, formConfig) { return __awaiter(void 0, void 0, void 0, function () {
    var operation, data, formSubmissionID, payload_1, _a, formID, submissionData_1, _b, beforeEmail, formOverrides, form, emails, formattedEmails, emailsToSend, log, err_1;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                operation = beforeChangeData.operation;
                if (!(operation === 'create')) return [3 /*break*/, 11];
                data = beforeChangeData.data, formSubmissionID = beforeChangeData.data.id, payload_1 = beforeChangeData.req.payload;
                _a = data || {}, formID = _a.form, submissionData_1 = _a.submissionData;
                _b = formConfig || {}, beforeEmail = _b.beforeEmail, formOverrides = _b.formOverrides;
                _c.label = 1;
            case 1:
                _c.trys.push([1, 9, , 10]);
                return [4 /*yield*/, payload_1.findByID({
                        id: formID,
                        collection: (formOverrides === null || formOverrides === void 0 ? void 0 : formOverrides.slug) || 'forms',
                    })];
            case 2:
                form = _c.sent();
                if (!form) return [3 /*break*/, 7];
                emails = form.emails;
                if (!emails) return [3 /*break*/, 6];
                formattedEmails = emails.map(function (email) {
                    var message = email.message, subject = email.subject, emailTo = email.emailTo, emailFrom = email.emailFrom;
                    var to = (0, replaceDoubleCurlys_1.replaceDoubleCurlys)(emailTo, submissionData_1);
                    var from = (0, replaceDoubleCurlys_1.replaceDoubleCurlys)(emailFrom, submissionData_1);
                    if (to && from) {
                        return ({
                            to: to,
                            from: from,
                            subject: (0, replaceDoubleCurlys_1.replaceDoubleCurlys)(subject, submissionData_1),
                            html: "<div>".concat((0, serializeRichText_1.serialize)(message, submissionData_1))
                        });
                    }
                    return null;
                }).filter(Boolean);
                emailsToSend = formattedEmails;
                if (!(typeof beforeEmail === 'function')) return [3 /*break*/, 4];
                return [4 /*yield*/, beforeEmail(formattedEmails)];
            case 3:
                emailsToSend = _c.sent();
                _c.label = 4;
            case 4:
                log = emailsToSend.map(function (_a) {
                    var html = _a.html, rest = __rest(_a, ["html"]);
                    return (__assign({}, rest));
                });
                return [4 /*yield*/, Promise.all(emailsToSend.map(function (email) { return __awaiter(void 0, void 0, void 0, function () {
                        var to, emailPromise, err_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    to = email.to;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, payload_1.sendEmail(email)];
                                case 2:
                                    emailPromise = _a.sent();
                                    return [2 /*return*/, emailPromise];
                                case 3:
                                    err_2 = _a.sent();
                                    console.error("Error while sending email to address: ".concat(to, ". Email not sent."));
                                    console.error(err_2);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); }))];
            case 5:
                _c.sent();
                _c.label = 6;
            case 6: return [3 /*break*/, 8];
            case 7:
                console.log('No emails to send.');
                _c.label = 8;
            case 8: return [3 /*break*/, 10];
            case 9:
                err_1 = _c.sent();
                console.error("Error while sending one or more emails in form submission id: ".concat(formSubmissionID, "."));
                console.error(err_1);
                return [3 /*break*/, 10];
            case 10: return [2 /*return*/, data];
            case 11: return [2 /*return*/, beforeChangeData];
        }
    });
}); };
exports.default = sendEmail;
//# sourceMappingURL=sendEmail.js.map